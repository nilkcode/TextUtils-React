{"version":3,"sources":["logo.svg","components/Navbar.js","components/TextForms.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toogleMode","htmlFor","Textforms","useState","text","setText","colormode","heading","value","onChange","event","console","log","target","onFocus","e","rows","style","backgroundColor","color","border","newText","toLocaleUpperCase","newLowerText","toLocaleLowerCase","capetiliseFirstletter","charAt","toUpperCase","slice","arrofinput","split","length","i","str2","join","document","getElementById","select","navigator","clipboard","writeText","defaultProps","abouttext","App","setMode","setalert","showAlert","message","msg","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0ab7c7a8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React,{useState} from 'react'\nimport PropTypes from 'prop-types';\nimport { a } from 'react-router-dom';\n\n\nexport default function Navbar(props) {\n    \n\n\n\n    return (\n      \n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} px-2`}>\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item active\">\n                <a className=\"nav-a\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>\n              </li>\n              {/* <li className=\"nav-item\">\n                <a className=\"nav-a\" to=\"/about\">{props.abouttext}</a>\n              </li> */}\n            \n            \n            </ul>\n          \n          </div>\n         \n          {/* <button onClick={() => props.modeColor('green')} type=\"button\" className=\"btn btn-outline-success\">Success</button>\n          <button onClick={() => props.modeColor('red')} type=\"button\" className=\"btn btn-outline-danger mx-3\">Danger</button>\n          <button onClick={() => props.modeColor('yellow')} type=\"button\" className=\"btn btn-outline-warning mx-2\">Warning</button> */}\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n              <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toogleMode} id=\"flexSwitchCheckDefault\"/>\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode === 'light' ? \"Enable DarkMode\" :\"Enable LightMode\"}</label>\n          </div>\n</nav>\n    )\n}\n\n\nNavbar.propTypes = {\n    title:PropTypes.string.isRequired,\n    abouttext:PropTypes.string\n};\n\nNavbar.defaultProps = {\n    title:'Default Props Here',\n    abouttext:'About Us'\n  };\n  \n\n\n","import React ,{ useState }  from 'react'\n\n\nexport default function Textforms(props) {\n\n    const handleUpClick = () => {\n       \n        console.log(\"Handle upper case click here\" + text);\n        let newText = text.toLocaleUpperCase();\n        console.log(newText);\n        setText(newText);\n    }\n\n    const handleLowerClick = () => {\n        let newLowerText = text.toLocaleLowerCase();\n        setText(newLowerText);\n    }\n\n    const handleClearTextClick = () => {\n        setText(\"\");\n    }\n\n    const handleOnCapitliseFirst = () => {\n\n       let capetiliseFirstletter =  text.charAt(0).toUpperCase() + text.slice();\n       console.log(text.slice(1));\n       setText(capetiliseFirstletter);\n    }\n\n    const handleOnCapitlisWordOfString = () => {\n\n        const inputStr = text;\n\n        // split the above string into array of a string;\n        // whenever  a blank space is encounter\n\n        let arrofinput = inputStr.split(' ');\n        console.log(arrofinput);\n        console.log(arrofinput.length);\n\n        // loop through each element of the array and capitliza the first letter;\n\n        for (var i = 0; i < arrofinput.length; i++) {\n            arrofinput[i] = arrofinput[i].charAt(0).toUpperCase() + arrofinput[i].slice(1);\n        \n        }\n\n        const str2 = arrofinput.join(\" \");\n        setText(str2);\n\n\n    }\n\n\n    // copy text \n\n    const handleCopy  = () => {\n       \n      let text = document.getElementById(\"myBox\");\n      text.select();\n      navigator.clipboard.writeText(text.value);\n\n\n    }\n\n    // removed extra space\n\n    const handleRemoveExtraSpace = () => {\n\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n\n    }\n\n    const handleFocus = (e) => {\n        setText(e.target.onFocus = \"\");\n    }\n\n    \n\n    const handleOnChange = (event) => {\n       \n        console.log(\"Handle On change\" ); \n        setText(event.target.value)\n\n    }\n   \n    \n    const [ text,setText] = useState(\"Please Enter text here\");\n\n    return (\n         <>\n         <div className=\"container\">\n            <h2 className={`my-2 text-${props.mode === 'light'?'dark':'light'}  text-${props.colormode === 'green' ? 'success' : 'danger'}`} >{props.heading}</h2>\n            <div className=\"mb-3\">\n                <textarea    className=\"form-control\" id=\"myBox\" value={text} onChange ={handleOnChange} onFocus={handleFocus} rows=\"10\" style={{backgroundColor:props.mode ==='light' ? '#f8f9fa' : '#212529',color:props.mode ==='light' ? '#000' : '#fff' ,border:props.mode ==='light' ? '#000' : '#fff'}}></textarea>           \n            </div>\n            <button className=\"btn btn-primary \" onClick={handleUpClick}>Convert to uppercase</button>\n            <button className=\"btn btn-info mx-1\" onClick={handleLowerClick}>Convert to lowercase</button>\n            <button className=\"btn btn-danger mx-1\" onClick={handleClearTextClick}>Clear text</button>\n            <button className=\"btn btn-success mx-1\" onClick={handleOnCapitliseFirst}>Capital First Word</button>\n            <button className=\"btn btn-success mx-1\" onClick={handleOnCapitlisWordOfString}>Capital First Word</button>\n            <button className=\"btn btn-success mx-1\" onClick={handleCopy}>Copy Text</button>\n            <button className=\"btn btn-success mx-1\" onClick={handleRemoveExtraSpace }>Removed Extra Space</button>\n\n         </div>\n\n         <div className={`container my-2 text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n             <h1>Text summery </h1>\n             <p>{ text.split(/[ ]+/).length - 1} words and {text.length} charecter</p>\n             <p>{0.008 * text.split(\" \").length  } read to one word</p>\n            \n             <h2>Preview Text ::</h2>\n             <p>\n                 {text.length>0?text:\"Your text is empty please write somthing in above box\"}\n             </p>\n         </div>\n        \n         </>\n    )\n}\n\n","import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Textforms from './components/TextForms';\n// import About from './components/About';\nimport TextConverter from './components/TextConverter';\nimport React, { useState } from 'react'\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  \n} from \"react-router-dom\";\n\nimport Alert from './components/Alert';\n\n\n\nfunction App() {\n   \n  const [mode, setMode] = useState(\"light\");  // whether dark  mode is enbled or not\n  const [alert, setalert] = useState(null);\n\n  \n   \n  const showAlert = (message ,type) => {\n    setalert({\n        msg: message,\n        type:type\n    })\n\n    setTimeout( () => {\n         \n      setalert(null)\n      \n    },1500)\n  }\n\n  const toogleMode = ()  => {\n     \n      if(mode === \"light\") {\n        setMode('dark');\n        document.body.style.backgroundColor = '#181b1e';\n        showAlert(\"Dark Mode has been Enbled\" , \"success\");\n        document.title = 'dark mode Enables'\n      }\n      else {\n        setMode('light');\n        document.body.style.backgroundColor = '#e3e3e3';\n        showAlert(\"Light Mode has been Enbled\" , \"success\");\n        document.title = 'light mode Enables'\n      }\n\n  }\n\n  // const modeColor = (color) => {\n      \n  //   if(color === 'green' ){\n  //     document.body.style.backgroundColor = '#8aad8a';\n    \n  //     showAlert(\"Light Mode has been Enbled\" , \"success\");\n     \n\n  //   }\n  //   else if(color === 'red') {\n  //     document.body.style.backgroundColor = '#c57873de';\n  //     showAlert(\"Light Mode has been Enbled\" , \"success\");\n  //   }\n  //   else if (color === 'yellow') {\n  //     document.body.style.backgroundColor = '#d9d96f';\n  //     showAlert(\"Light Mode has been Enbled\" , \"success\");\n  //   }\n  //modeColor={modeColor}\n  // }\n\n  return (\n    <div>\n    \n     {/* <Router> */}\n     <Navbar title=\"Textutils\"  mode={mode} toogleMode={toogleMode}  />\n     {/* <Alert  alert={alert}/>\n      <div className=\"container\">\n      <Routes> */}\n       <Textforms showAlert={showAlert}  heading=\"Enter text analyze below\" mode={mode}/>\n        {/* <Route exact path=\"/\" element={<Textforms />}  mode={mode}  />\n        <Route  exact path=\"/about\" element={<About />}  mode={mode} /> */}\n      {/* </Routes>\n       \n        {/* <TextConverter/> */}\n       {/* </div> } */}\n     {/* </Router> */}\n    </div>\n \n  );\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}